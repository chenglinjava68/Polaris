<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://code.alibabatech.com/schema/dubbo  
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd "
	   default-init-method="init" default-lazy-init="false"
	   default-destroy-method="destroy">
	
	<!-- 注解扫描 -->
	<context:component-scan base-package="com.polaris" />
    
    <!-- 读入配置文件 -->
	<bean id="propertyConfigurer" class="com.polaris.core.config.ConfPropertyPlaceholderConfigurer">  
        <property name="fileEncoding" value="utf-8" /> 
    </bean>
    
	<!--自定义数据源-->
	<bean id="dataSource_db" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${db.driverClassName}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" /> 
		<property name="initialPoolSize" value="${db.initialPoolSize}" />
		<property name="maxPoolSize" value="${db.maxPoolSize}" />
		<property name="minPoolSize" value="${db.minPoolSize}" />
		<property name="maxIdleTime" value="${db.maxIdleTime}" />
	</bean>
	<bean id="dataSource" class="com.polaris.core.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource_db" value-ref="dataSource_db" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_db"/>
	</bean>
	
    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan">
        	<list></list>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- Spring Data Jpa适配器 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 引擎内部提供的UUID生成器，依赖fastxml的java-uuid-generator模块 -->
    <bean id="uuidGenerator" class="org.activiti.engine.impl.persistence.StrongUuidGenerator" />
	
	<!-- Activiti begin -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="processDefinitionCacheLimit" value="10"/>
        <property name="dbIdentityUsed" value="false" />

		<!-- UUID作为主键生成策略--> 
        <property name="idGenerator" ref="uuidGenerator" />  

        <!-- 生成流程图的字体 -->
        <property name="activityFontName" value="${diagram.activityFontName}"/>
        <property name="labelFontName" value="${diagram.labelFontName}"/>

        <!-- JPA -->
        <property name="jpaEntityManagerFactory" ref="entityManagerFactory" />
        <property name="jpaHandleTransaction" value="false" />
        <property name="jpaCloseEntityManager" value="false" />
        
        <!-- 全局事件 -->
        <property name="eventListeners">
           <list>
               <ref bean="workflowListener"/>
           </list>
        </property>
        
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- Activiti end -->
	
	<!-- 提供方应用信息，用于计算依赖关系，不要与消费方一样 --> 
	<dubbo:application name="${project.name}">
		<dubbo:parameter key="qos.enable" value="false"></dubbo:parameter>
	</dubbo:application> 
    
    <!-- 注册地址 -->  
    <dubbo:registry address="${dubbo.registry.address}" check="false" />  

    <!-- 用dubbo协议在20880端口暴露服务 ，注意不能与其他服务端口相同  -->
    <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" dispatcher="all" threadpool="${dubbo.protocol.threadpool}" threads="${dubbo.protocol.threads}" accepts="${dubbo.protocol.accepts}" />
    
    <!-- 从注册中心发现监控中心地址，否则直连监控中心   
    <dubbo:monitor protocol="registry" />
    -->
    
    <!-- 服务提供方的参数设定 -->
    <dubbo:provider connections="${dubbo.provider.connections}" timeout="${dubbo.provider.timeout}" retries="${dubbo.provider.retries}" />
    
    <!-- 服务消费放方的参数设定 -->
    <dubbo:consumer check="false" />
    
    <!-- 注解方式扫描dubbo服务 --> 
    <dubbo:annotation package="com.polaris" />
</beans>